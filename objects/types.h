// This file is generated by Sialan Object Creator
// https://github.com/sialan-labs/sialan-object-creator

#ifndef TELEGRAMTYPEOBJECT_H
#define TELEGRAMTYPEOBJECT_H

#include <QString>
#include <QtQml>
#include <types/types.h>

class FileLocationObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 localId READ localId WRITE setLocalId NOTIFY localIdChanged)
    Q_PROPERTY(qint64 secret READ secret WRITE setSecret NOTIFY secretChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(qint64 volumeId READ volumeId WRITE setVolumeId NOTIFY volumeIdChanged)
    Q_PROPERTY(FileLocation::FileLocationType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    FileLocationObject(const FileLocation & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _localId = another.localId();
        _secret = another.secret();
        _dcId = another.dcId();
        _volumeId = another.volumeId();
        _classType = another.classType();

    }
    FileLocationObject(QObject *parent = 0) : QObject(parent){}
    ~FileLocationObject(){}

    qint32 localId() const {
        return _localId;
    }

    void setLocalId(qint32 value) {
        if( value == _localId )
            return;
        _localId = value;
        emit localIdChanged();
        emit changed();
    }

    qint64 secret() const {
        return _secret;
    }

    void setSecret(qint64 value) {
        if( value == _secret )
            return;
        _secret = value;
        emit secretChanged();
        emit changed();
    }

    qint32 dcId() const {
        return _dcId;
    }

    void setDcId(qint32 value) {
        if( value == _dcId )
            return;
        _dcId = value;
        emit dcIdChanged();
        emit changed();
    }

    qint64 volumeId() const {
        return _volumeId;
    }

    void setVolumeId(qint64 value) {
        if( value == _volumeId )
            return;
        _volumeId = value;
        emit volumeIdChanged();
        emit changed();
    }

    FileLocation::FileLocationType classType() const {
        return _classType;
    }

    void setClassType(FileLocation::FileLocationType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const FileLocation & another) {
        _localId = another.localId();
        _secret = another.secret();
        _dcId = another.dcId();
        _volumeId = another.volumeId();
        _classType = another.classType();

    }
signals:
    void changed();
    void localIdChanged();
    void secretChanged();
    void dcIdChanged();
    void volumeIdChanged();
    void classTypeChanged();

private:
    qint32 _localId;
    qint64 _secret;
    qint32 _dcId;
    qint64 _volumeId;
    FileLocation::FileLocationType _classType;

};

class PeerObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 chatId READ chatId WRITE setChatId NOTIFY chatIdChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(Peer::PeerType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    PeerObject(const Peer & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _chatId = another.chatId();
        _userId = another.userId();
        _classType = another.classType();

    }
    PeerObject(QObject *parent = 0) : QObject(parent){}
    ~PeerObject(){}

    qint32 chatId() const {
        return _chatId;
    }

    void setChatId(qint32 value) {
        if( value == _chatId )
            return;
        _chatId = value;
        emit chatIdChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    Peer::PeerType classType() const {
        return _classType;
    }

    void setClassType(Peer::PeerType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Peer & another) {
        _chatId = another.chatId();
        _userId = another.userId();
        _classType = another.classType();

    }
signals:
    void changed();
    void chatIdChanged();
    void userIdChanged();
    void classTypeChanged();

private:
    qint32 _chatId;
    qint32 _userId;
    Peer::PeerType _classType;

};

class UserStatusObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 wasOnline READ wasOnline WRITE setWasOnline NOTIFY wasOnlineChanged)
    Q_PROPERTY(qint32 expires READ expires WRITE setExpires NOTIFY expiresChanged)
    Q_PROPERTY(UserStatus::UserStatusType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    UserStatusObject(const UserStatus & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _wasOnline = another.wasOnline();
        _expires = another.expires();
        _classType = another.classType();

    }
    UserStatusObject(QObject *parent = 0) : QObject(parent){}
    ~UserStatusObject(){}

    qint32 wasOnline() const {
        return _wasOnline;
    }

    void setWasOnline(qint32 value) {
        if( value == _wasOnline )
            return;
        _wasOnline = value;
        emit wasOnlineChanged();
        emit changed();
    }

    qint32 expires() const {
        return _expires;
    }

    void setExpires(qint32 value) {
        if( value == _expires )
            return;
        _expires = value;
        emit expiresChanged();
        emit changed();
    }

    UserStatus::UserStatusType classType() const {
        return _classType;
    }

    void setClassType(UserStatus::UserStatusType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const UserStatus & another) {
        _wasOnline = another.wasOnline();
        _expires = another.expires();
        _classType = another.classType();

    }
signals:
    void changed();
    void wasOnlineChanged();
    void expiresChanged();
    void classTypeChanged();

private:
    qint32 _wasOnline;
    qint32 _expires;
    UserStatus::UserStatusType _classType;

};

class GeoPointObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(double longitude READ longitude WRITE setLongitude NOTIFY longitudeChanged)
    Q_PROPERTY(double lat READ lat WRITE setLat NOTIFY latChanged)
    Q_PROPERTY(GeoPoint::GeoPointType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    GeoPointObject(const GeoPoint & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _longitude = another.longitude();
        _lat = another.lat();
        _classType = another.classType();

    }
    GeoPointObject(QObject *parent = 0) : QObject(parent){}
    ~GeoPointObject(){}

    double longitude() const {
        return _longitude;
    }

    void setLongitude(double value) {
        if( value == _longitude )
            return;
        _longitude = value;
        emit longitudeChanged();
        emit changed();
    }

    double lat() const {
        return _lat;
    }

    void setLat(double value) {
        if( value == _lat )
            return;
        _lat = value;
        emit latChanged();
        emit changed();
    }

    GeoPoint::GeoPointType classType() const {
        return _classType;
    }

    void setClassType(GeoPoint::GeoPointType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const GeoPoint & another) {
        _longitude = another.longitude();
        _lat = another.lat();
        _classType = another.classType();

    }
signals:
    void changed();
    void longitudeChanged();
    void latChanged();
    void classTypeChanged();

private:
    double _longitude;
    double _lat;
    GeoPoint::GeoPointType _classType;

};

class PeerNotifySettingsObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 muteUntil READ muteUntil WRITE setMuteUntil NOTIFY muteUntilChanged)
    Q_PROPERTY(qint32 eventsMask READ eventsMask WRITE setEventsMask NOTIFY eventsMaskChanged)
    Q_PROPERTY(QString sound READ sound WRITE setSound NOTIFY soundChanged)
    Q_PROPERTY(bool showPreviews READ showPreviews WRITE setShowPreviews NOTIFY showPreviewsChanged)
    Q_PROPERTY(PeerNotifySettings::PeerNotifySettingsType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    PeerNotifySettingsObject(const PeerNotifySettings & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _muteUntil = another.muteUntil();
        _eventsMask = another.eventsMask();
        _sound = another.sound();
        _showPreviews = false;
        _classType = another.classType();

    }
    PeerNotifySettingsObject(QObject *parent = 0) : QObject(parent){}
    ~PeerNotifySettingsObject(){}

    qint32 muteUntil() const {
        return _muteUntil;
    }

    void setMuteUntil(qint32 value) {
        if( value == _muteUntil )
            return;
        _muteUntil = value;
        emit muteUntilChanged();
        emit changed();
    }

    qint32 eventsMask() const {
        return _eventsMask;
    }

    void setEventsMask(qint32 value) {
        if( value == _eventsMask )
            return;
        _eventsMask = value;
        emit eventsMaskChanged();
        emit changed();
    }

    QString sound() const {
        return _sound;
    }

    void setSound(QString value) {
        if( value == _sound )
            return;
        _sound = value;
        emit soundChanged();
        emit changed();
    }

    bool showPreviews() const {
        return _showPreviews;
    }

    void setShowPreviews(bool value) {
        if( value == _showPreviews )
            return;
        _showPreviews = value;
        emit showPreviewsChanged();
        emit changed();
    }

    PeerNotifySettings::PeerNotifySettingsType classType() const {
        return _classType;
    }

    void setClassType(PeerNotifySettings::PeerNotifySettingsType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const PeerNotifySettings & another) {
        _muteUntil = another.muteUntil();
        _eventsMask = another.eventsMask();
        _sound = another.sound();
        _showPreviews = another.showPreviews();
        _classType = another.classType();

    }
signals:
    void changed();
    void muteUntilChanged();
    void eventsMaskChanged();
    void soundChanged();
    void showPreviewsChanged();
    void classTypeChanged();

private:
    qint32 _muteUntil;
    qint32 _eventsMask;
    QString _sound;
    bool _showPreviews;
    PeerNotifySettings::PeerNotifySettingsType _classType;

};

class PhotoSizeObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(QString type READ type WRITE setType NOTIFY typeChanged)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(FileLocationObject* location READ location WRITE setLocation NOTIFY locationChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(PhotoSize::PhotoSizeType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    PhotoSizeObject(const PhotoSize & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _h = another.h();
        _type = another.type();
        _bytes = another.bytes();
        _location = new FileLocationObject(another.location(), this);
        _size = another.size();
        _w = another.w();
        _classType = another.classType();

    }
    PhotoSizeObject(QObject *parent = 0) : QObject(parent){}
    ~PhotoSizeObject(){}

    qint32 h() const {
        return _h;
    }

    void setH(qint32 value) {
        if( value == _h )
            return;
        _h = value;
        emit hChanged();
        emit changed();
    }

    QString type() const {
        return _type;
    }

    void setType(QString value) {
        if( value == _type )
            return;
        _type = value;
        emit typeChanged();
        emit changed();
    }

    QByteArray bytes() const {
        return _bytes;
    }

    void setBytes(QByteArray value) {
        if( value == _bytes )
            return;
        _bytes = value;
        emit bytesChanged();
        emit changed();
    }

    FileLocationObject* location() const {
        return _location;
    }

    void setLocation(FileLocationObject* value) {
        if( value == _location )
            return;
        _location = value;
        emit locationChanged();
        emit changed();
    }

    qint32 size() const {
        return _size;
    }

    void setSize(qint32 value) {
        if( value == _size )
            return;
        _size = value;
        emit sizeChanged();
        emit changed();
    }

    qint32 w() const {
        return _w;
    }

    void setW(qint32 value) {
        if( value == _w )
            return;
        _w = value;
        emit wChanged();
        emit changed();
    }

    PhotoSize::PhotoSizeType classType() const {
        return _classType;
    }

    void setClassType(PhotoSize::PhotoSizeType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const PhotoSize & another) {
        _h = another.h();
        _type = another.type();
        _bytes = another.bytes();
        *_location = another.location();
        _size = another.size();
        _w = another.w();
        _classType = another.classType();

    }
signals:
    void changed();
    void hChanged();
    void typeChanged();
    void bytesChanged();
    void locationChanged();
    void sizeChanged();
    void wChanged();
    void classTypeChanged();

private:
    qint32 _h;
    QString _type;
    QByteArray _bytes;
    FileLocationObject* _location;
    qint32 _size;
    qint32 _w;
    PhotoSize::PhotoSizeType _classType;

};

class AudioObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(Audio::AudioType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    AudioObject(const Audio & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _dcId = another.dcId();
        _mimeType = another.mimeType();
        _duration = another.duration();
        _date = another.date();
        _size = another.size();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _classType = another.classType();

    }
    AudioObject(QObject *parent = 0) : QObject(parent){}
    ~AudioObject(){}

    qint64 id() const {
        return _id;
    }

    void setId(qint64 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    qint32 dcId() const {
        return _dcId;
    }

    void setDcId(qint32 value) {
        if( value == _dcId )
            return;
        _dcId = value;
        emit dcIdChanged();
        emit changed();
    }

    QString mimeType() const {
        return _mimeType;
    }

    void setMimeType(QString value) {
        if( value == _mimeType )
            return;
        _mimeType = value;
        emit mimeTypeChanged();
        emit changed();
    }

    qint32 duration() const {
        return _duration;
    }

    void setDuration(qint32 value) {
        if( value == _duration )
            return;
        _duration = value;
        emit durationChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    qint32 size() const {
        return _size;
    }

    void setSize(qint32 value) {
        if( value == _size )
            return;
        _size = value;
        emit sizeChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    Audio::AudioType classType() const {
        return _classType;
    }

    void setClassType(Audio::AudioType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Audio & another) {
        _id = another.id();
        _dcId = another.dcId();
        _mimeType = another.mimeType();
        _duration = another.duration();
        _date = another.date();
        _size = another.size();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void dcIdChanged();
    void mimeTypeChanged();
    void durationChanged();
    void dateChanged();
    void sizeChanged();
    void accessHashChanged();
    void userIdChanged();
    void classTypeChanged();

private:
    qint64 _id;
    qint32 _dcId;
    QString _mimeType;
    qint32 _duration;
    qint32 _date;
    qint32 _size;
    qint64 _accessHash;
    qint32 _userId;
    Audio::AudioType _classType;

};

class DocumentObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(PhotoSizeObject* thumb READ thumb WRITE setThumb NOTIFY thumbChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QString fileName READ fileName WRITE setFileName NOTIFY fileNameChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(Document::DocumentType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    DocumentObject(const Document & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _dcId = another.dcId();
        _mimeType = another.mimeType();
        _thumb = new PhotoSizeObject(another.thumb(), this);
        _date = another.date();
        _fileName = another.fileName();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _size = another.size();
        _classType = another.classType();

    }
    DocumentObject(QObject *parent = 0) : QObject(parent){}
    ~DocumentObject(){}

    qint64 id() const {
        return _id;
    }

    void setId(qint64 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    qint32 dcId() const {
        return _dcId;
    }

    void setDcId(qint32 value) {
        if( value == _dcId )
            return;
        _dcId = value;
        emit dcIdChanged();
        emit changed();
    }

    QString mimeType() const {
        return _mimeType;
    }

    void setMimeType(QString value) {
        if( value == _mimeType )
            return;
        _mimeType = value;
        emit mimeTypeChanged();
        emit changed();
    }

    PhotoSizeObject* thumb() const {
        return _thumb;
    }

    void setThumb(PhotoSizeObject* value) {
        if( value == _thumb )
            return;
        _thumb = value;
        emit thumbChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    QString fileName() const {
        return _fileName;
    }

    void setFileName(QString value) {
        if( value == _fileName )
            return;
        _fileName = value;
        emit fileNameChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    qint32 size() const {
        return _size;
    }

    void setSize(qint32 value) {
        if( value == _size )
            return;
        _size = value;
        emit sizeChanged();
        emit changed();
    }

    Document::DocumentType classType() const {
        return _classType;
    }

    void setClassType(Document::DocumentType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Document & another) {
        _id = another.id();
        _dcId = another.dcId();
        _mimeType = another.mimeType();
        *_thumb = another.thumb();
        _date = another.date();
        _fileName = another.fileName();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _size = another.size();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void dcIdChanged();
    void mimeTypeChanged();
    void thumbChanged();
    void dateChanged();
    void fileNameChanged();
    void accessHashChanged();
    void userIdChanged();
    void sizeChanged();
    void classTypeChanged();

private:
    qint64 _id;
    qint32 _dcId;
    QString _mimeType;
    PhotoSizeObject* _thumb;
    qint32 _date;
    QString _fileName;
    qint64 _accessHash;
    qint32 _userId;
    qint32 _size;
    Document::DocumentType _classType;

};

class VideoObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 dcId READ dcId WRITE setDcId NOTIFY dcIdChanged)
    Q_PROPERTY(QString caption READ caption WRITE setCaption NOTIFY captionChanged)
    Q_PROPERTY(QString mimeType READ mimeType WRITE setMimeType NOTIFY mimeTypeChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(PhotoSizeObject* thumb READ thumb WRITE setThumb NOTIFY thumbChanged)
    Q_PROPERTY(qint32 duration READ duration WRITE setDuration NOTIFY durationChanged)
    Q_PROPERTY(qint32 h READ h WRITE setH NOTIFY hChanged)
    Q_PROPERTY(qint32 size READ size WRITE setSize NOTIFY sizeChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(qint32 w READ w WRITE setW NOTIFY wChanged)
    Q_PROPERTY(Video::VideoType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    VideoObject(const Video & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _dcId = another.dcId();
        _caption = another.caption();
        _mimeType = another.mimeType();
        _date = another.date();
        _thumb = new PhotoSizeObject(another.thumb(), this);
        _duration = another.duration();
        _h = another.h();
        _size = another.size();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _w = another.w();
        _classType = another.classType();

    }
    VideoObject(QObject *parent = 0) : QObject(parent){}
    ~VideoObject(){}

    qint64 id() const {
        return _id;
    }

    void setId(qint64 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    qint32 dcId() const {
        return _dcId;
    }

    void setDcId(qint32 value) {
        if( value == _dcId )
            return;
        _dcId = value;
        emit dcIdChanged();
        emit changed();
    }

    QString caption() const {
        return _caption;
    }

    void setCaption(QString value) {
        if( value == _caption )
            return;
        _caption = value;
        emit captionChanged();
        emit changed();
    }

    QString mimeType() const {
        return _mimeType;
    }

    void setMimeType(QString value) {
        if( value == _mimeType )
            return;
        _mimeType = value;
        emit mimeTypeChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    PhotoSizeObject* thumb() const {
        return _thumb;
    }

    void setThumb(PhotoSizeObject* value) {
        if( value == _thumb )
            return;
        _thumb = value;
        emit thumbChanged();
        emit changed();
    }

    qint32 duration() const {
        return _duration;
    }

    void setDuration(qint32 value) {
        if( value == _duration )
            return;
        _duration = value;
        emit durationChanged();
        emit changed();
    }

    qint32 h() const {
        return _h;
    }

    void setH(qint32 value) {
        if( value == _h )
            return;
        _h = value;
        emit hChanged();
        emit changed();
    }

    qint32 size() const {
        return _size;
    }

    void setSize(qint32 value) {
        if( value == _size )
            return;
        _size = value;
        emit sizeChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    qint32 w() const {
        return _w;
    }

    void setW(qint32 value) {
        if( value == _w )
            return;
        _w = value;
        emit wChanged();
        emit changed();
    }

    Video::VideoType classType() const {
        return _classType;
    }

    void setClassType(Video::VideoType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Video & another) {
        _id = another.id();
        _dcId = another.dcId();
        _caption = another.caption();
        _mimeType = another.mimeType();
        _date = another.date();
        *_thumb = another.thumb();
        _duration = another.duration();
        _h = another.h();
        _size = another.size();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _w = another.w();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void dcIdChanged();
    void captionChanged();
    void mimeTypeChanged();
    void dateChanged();
    void thumbChanged();
    void durationChanged();
    void hChanged();
    void sizeChanged();
    void accessHashChanged();
    void userIdChanged();
    void wChanged();
    void classTypeChanged();

private:
    qint64 _id;
    qint32 _dcId;
    QString _caption;
    QString _mimeType;
    qint32 _date;
    PhotoSizeObject* _thumb;
    qint32 _duration;
    qint32 _h;
    qint32 _size;
    qint64 _accessHash;
    qint32 _userId;
    qint32 _w;
    Video::VideoType _classType;

};

class PhotoObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint64 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(QString caption READ caption WRITE setCaption NOTIFY captionChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(QList<PhotoSizeObject*> sizes READ sizes WRITE setSizes NOTIFY sizesChanged)
    Q_PROPERTY(GeoPointObject* geo READ geo WRITE setGeo NOTIFY geoChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(Photo::PhotoType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    PhotoObject(const Photo & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _caption = another.caption();
        _date = another.date();
//        _sizes = another.sizes();
        _geo = new GeoPointObject(another.geo(), this);
        _accessHash = another.accessHash();
        _userId = another.userId();
        _classType = another.classType();

    }
    PhotoObject(QObject *parent = 0) : QObject(parent){}
    ~PhotoObject(){}

    qint64 id() const {
        return _id;
    }

    void setId(qint64 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    QString caption() const {
        return _caption;
    }

    void setCaption(QString value) {
        if( value == _caption )
            return;
        _caption = value;
        emit captionChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    QList<PhotoSizeObject*> sizes() const {
        return _sizes;
    }

    void setSizes(QList<PhotoSizeObject*> value) {
        if( value == _sizes )
            return;
        _sizes = value;
        emit sizesChanged();
        emit changed();
    }

    GeoPointObject* geo() const {
        return _geo;
    }

    void setGeo(GeoPointObject* value) {
        if( value == _geo )
            return;
        _geo = value;
        emit geoChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    Photo::PhotoType classType() const {
        return _classType;
    }

    void setClassType(Photo::PhotoType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Photo & another) {
        _id = another.id();
        _caption = another.caption();
        _date = another.date();
//        _sizes = another.sizes();
        *_geo = another.geo();
        _accessHash = another.accessHash();
        _userId = another.userId();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void captionChanged();
    void dateChanged();
    void sizesChanged();
    void geoChanged();
    void accessHashChanged();
    void userIdChanged();
    void classTypeChanged();

private:
    qint64 _id;
    QString _caption;
    qint32 _date;
    QList<PhotoSizeObject*> _sizes;
    GeoPointObject* _geo;
    qint64 _accessHash;
    qint32 _userId;
    Photo::PhotoType _classType;

};

class MessageActionObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(QString address READ address WRITE setAddress NOTIFY addressChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(PhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QList<qint32> users READ users WRITE setUsers NOTIFY usersChanged)
    Q_PROPERTY(MessageAction::MessageActionType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    MessageActionObject(const MessageAction & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _address = another.address();
        _userId = another.userId();
        _photo = new PhotoObject(another.photo(), this);
        _title = another.title();
        _users = another.users();
        _classType = another.classType();

    }
    MessageActionObject(QObject *parent = 0) : QObject(parent){}
    ~MessageActionObject(){}

    QString address() const {
        return _address;
    }

    void setAddress(QString value) {
        if( value == _address )
            return;
        _address = value;
        emit addressChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    PhotoObject* photo() const {
        return _photo;
    }

    void setPhoto(PhotoObject* value) {
        if( value == _photo )
            return;
        _photo = value;
        emit photoChanged();
        emit changed();
    }

    QString title() const {
        return _title;
    }

    void setTitle(QString value) {
        if( value == _title )
            return;
        _title = value;
        emit titleChanged();
        emit changed();
    }

    QList<qint32> users() const {
        return _users;
    }

    void setUsers(QList<qint32> value) {
        if( value == _users )
            return;
        _users = value;
        emit usersChanged();
        emit changed();
    }

    MessageAction::MessageActionType classType() const {
        return _classType;
    }

    void setClassType(MessageAction::MessageActionType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const MessageAction & another) {
        _address = another.address();
        _userId = another.userId();
        *_photo = another.photo();
        _title = another.title();
        _users = another.users();
        _classType = another.classType();

    }
signals:
    void changed();
    void addressChanged();
    void userIdChanged();
    void photoChanged();
    void titleChanged();
    void usersChanged();
    void classTypeChanged();

private:
    QString _address;
    qint32 _userId;
    PhotoObject* _photo;
    QString _title;
    QList<qint32> _users;
    MessageAction::MessageActionType _classType;

};

class ChatPhotoObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(FileLocationObject* photoBig READ photoBig WRITE setPhotoBig NOTIFY photoBigChanged)
    Q_PROPERTY(FileLocationObject* photoSmall READ photoSmall WRITE setPhotoSmall NOTIFY photoSmallChanged)
    Q_PROPERTY(ChatPhoto::ChatPhotoType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    ChatPhotoObject(const ChatPhoto & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _photoBig = new FileLocationObject(another.photoBig(), this);
        _photoSmall = new FileLocationObject(another.photoSmall(), this);
        _classType = another.classType();

    }
    ChatPhotoObject(QObject *parent = 0) : QObject(parent){}
    ~ChatPhotoObject(){}

    FileLocationObject* photoBig() const {
        return _photoBig;
    }

    void setPhotoBig(FileLocationObject* value) {
        if( value == _photoBig )
            return;
        _photoBig = value;
        emit photoBigChanged();
        emit changed();
    }

    FileLocationObject* photoSmall() const {
        return _photoSmall;
    }

    void setPhotoSmall(FileLocationObject* value) {
        if( value == _photoSmall )
            return;
        _photoSmall = value;
        emit photoSmallChanged();
        emit changed();
    }

    ChatPhoto::ChatPhotoType classType() const {
        return _classType;
    }

    void setClassType(ChatPhoto::ChatPhotoType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const ChatPhoto & another) {
        *_photoBig = another.photoBig();
        *_photoSmall = another.photoSmall();
        _classType = another.classType();

    }
signals:
    void changed();
    void photoBigChanged();
    void photoSmallChanged();
    void classTypeChanged();

private:
    FileLocationObject* _photoBig;
    FileLocationObject* _photoSmall;
    ChatPhoto::ChatPhotoType _classType;

};

class UserProfilePhotoObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint64 photoId READ photoId WRITE setPhotoId NOTIFY photoIdChanged)
    Q_PROPERTY(FileLocationObject* photoBig READ photoBig WRITE setPhotoBig NOTIFY photoBigChanged)
    Q_PROPERTY(FileLocationObject* photoSmall READ photoSmall WRITE setPhotoSmall NOTIFY photoSmallChanged)
    Q_PROPERTY(UserProfilePhoto::UserProfilePhotoType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    UserProfilePhotoObject(const UserProfilePhoto & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _photoId = another.photoId();
        _photoBig = new FileLocationObject(another.photoBig(), this);
        _photoSmall = new FileLocationObject(another.photoSmall(), this);
        _classType = another.classType();

    }
    UserProfilePhotoObject(QObject *parent = 0) : QObject(parent){}
    ~UserProfilePhotoObject(){}

    qint64 photoId() const {
        return _photoId;
    }

    void setPhotoId(qint64 value) {
        if( value == _photoId )
            return;
        _photoId = value;
        emit photoIdChanged();
        emit changed();
    }

    FileLocationObject* photoBig() const {
        return _photoBig;
    }

    void setPhotoBig(FileLocationObject* value) {
        if( value == _photoBig )
            return;
        _photoBig = value;
        emit photoBigChanged();
        emit changed();
    }

    FileLocationObject* photoSmall() const {
        return _photoSmall;
    }

    void setPhotoSmall(FileLocationObject* value) {
        if( value == _photoSmall )
            return;
        _photoSmall = value;
        emit photoSmallChanged();
        emit changed();
    }

    UserProfilePhoto::UserProfilePhotoType classType() const {
        return _classType;
    }

    void setClassType(UserProfilePhoto::UserProfilePhotoType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const UserProfilePhoto & another) {
        _photoId = another.photoId();
        *_photoBig = another.photoBig();
        *_photoSmall = another.photoSmall();
        _classType = another.classType();

    }
signals:
    void changed();
    void photoIdChanged();
    void photoBigChanged();
    void photoSmallChanged();
    void classTypeChanged();

private:
    qint64 _photoId;
    FileLocationObject* _photoBig;
    FileLocationObject* _photoSmall;
    UserProfilePhoto::UserProfilePhotoType _classType;

};

class ChatObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 participantsCount READ participantsCount WRITE setParticipantsCount NOTIFY participantsCountChanged)
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint32 version READ version WRITE setVersion NOTIFY versionChanged)
    Q_PROPERTY(QString venue READ venue WRITE setVenue NOTIFY venueChanged)
    Q_PROPERTY(QString title READ title WRITE setTitle NOTIFY titleChanged)
    Q_PROPERTY(QString address READ address WRITE setAddress NOTIFY addressChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(ChatPhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(GeoPointObject* geo READ geo WRITE setGeo NOTIFY geoChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(bool checkedIn READ checkedIn WRITE setCheckedIn NOTIFY checkedInChanged)
    Q_PROPERTY(bool left READ left WRITE setLeft NOTIFY leftChanged)
    Q_PROPERTY(Chat::ChatType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    ChatObject(const Chat & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _participantsCount = another.participantsCount();
        _id = another.id();
        _version = another.version();
        _venue = another.venue();
        _title = another.title();
        _address = another.address();
        _date = another.date();
        _photo = new ChatPhotoObject(another.photo(), this);
        _geo = new GeoPointObject(another.geo(), this);
        _accessHash = another.accessHash();
        _checkedIn = false;
        _left = false;
        _classType = another.classType();

    }
    ChatObject(QObject *parent = 0) : QObject(parent){}
    ~ChatObject(){}

    qint32 participantsCount() const {
        return _participantsCount;
    }

    void setParticipantsCount(qint32 value) {
        if( value == _participantsCount )
            return;
        _participantsCount = value;
        emit participantsCountChanged();
        emit changed();
    }

    qint32 id() const {
        return _id;
    }

    void setId(qint32 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    qint32 version() const {
        return _version;
    }

    void setVersion(qint32 value) {
        if( value == _version )
            return;
        _version = value;
        emit versionChanged();
        emit changed();
    }

    QString venue() const {
        return _venue;
    }

    void setVenue(QString value) {
        if( value == _venue )
            return;
        _venue = value;
        emit venueChanged();
        emit changed();
    }

    QString title() const {
        return _title;
    }

    void setTitle(QString value) {
        if( value == _title )
            return;
        _title = value;
        emit titleChanged();
        emit changed();
    }

    QString address() const {
        return _address;
    }

    void setAddress(QString value) {
        if( value == _address )
            return;
        _address = value;
        emit addressChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    ChatPhotoObject* photo() const {
        return _photo;
    }

    void setPhoto(ChatPhotoObject* value) {
        if( value == _photo )
            return;
        _photo = value;
        emit photoChanged();
        emit changed();
    }

    GeoPointObject* geo() const {
        return _geo;
    }

    void setGeo(GeoPointObject* value) {
        if( value == _geo )
            return;
        _geo = value;
        emit geoChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    bool checkedIn() const {
        return _checkedIn;
    }

    void setCheckedIn(bool value) {
        if( value == _checkedIn )
            return;
        _checkedIn = value;
        emit checkedInChanged();
        emit changed();
    }

    bool left() const {
        return _left;
    }

    void setLeft(bool value) {
        if( value == _left )
            return;
        _left = value;
        emit leftChanged();
        emit changed();
    }

    Chat::ChatType classType() const {
        return _classType;
    }

    void setClassType(Chat::ChatType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Chat & another) {
        _participantsCount = another.participantsCount();
        _id = another.id();
        _version = another.version();
        _venue = another.venue();
        _title = another.title();
        _address = another.address();
        _date = another.date();
        *_photo = another.photo();
        *_geo = another.geo();
        _accessHash = another.accessHash();
        _checkedIn = another.checkedIn();
        _left = another.left();
        _classType = another.classType();

    }
signals:
    void changed();
    void participantsCountChanged();
    void idChanged();
    void versionChanged();
    void venueChanged();
    void titleChanged();
    void addressChanged();
    void dateChanged();
    void photoChanged();
    void geoChanged();
    void accessHashChanged();
    void checkedInChanged();
    void leftChanged();
    void classTypeChanged();

private:
    qint32 _participantsCount;
    qint32 _id;
    qint32 _version;
    QString _venue;
    QString _title;
    QString _address;
    qint32 _date;
    ChatPhotoObject* _photo;
    GeoPointObject* _geo;
    qint64 _accessHash;
    bool _checkedIn;
    bool _left;
    Chat::ChatType _classType;

};

class DialogObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(PeerObject* peer READ peer WRITE setPeer NOTIFY peerChanged)
    Q_PROPERTY(PeerNotifySettingsObject* notifySettings READ notifySettings WRITE setNotifySettings NOTIFY notifySettingsChanged)
    Q_PROPERTY(qint32 topMessage READ topMessage WRITE setTopMessage NOTIFY topMessageChanged)
    Q_PROPERTY(qint32 unreadCount READ unreadCount WRITE setUnreadCount NOTIFY unreadCountChanged)
    Q_PROPERTY(Dialog::DialogType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    DialogObject(const Dialog & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _peer = new PeerObject(another.peer(), this);
        _notifySettings = new PeerNotifySettingsObject(another.notifySettings(), this);
        _topMessage = another.topMessage();
        _unreadCount = another.unreadCount();
        _classType = another.classType();

    }
    DialogObject(QObject *parent = 0) : QObject(parent){}
    ~DialogObject(){}

    PeerObject* peer() const {
        return _peer;
    }

    void setPeer(PeerObject* value) {
        if( value == _peer )
            return;
        _peer = value;
        emit peerChanged();
        emit changed();
    }

    PeerNotifySettingsObject* notifySettings() const {
        return _notifySettings;
    }

    void setNotifySettings(PeerNotifySettingsObject* value) {
        if( value == _notifySettings )
            return;
        _notifySettings = value;
        emit notifySettingsChanged();
        emit changed();
    }

    qint32 topMessage() const {
        return _topMessage;
    }

    void setTopMessage(qint32 value) {
        if( value == _topMessage )
            return;
        _topMessage = value;
        emit topMessageChanged();
        emit changed();
    }

    qint32 unreadCount() const {
        return _unreadCount;
    }

    void setUnreadCount(qint32 value) {
        if( value == _unreadCount )
            return;
        _unreadCount = value;
        emit unreadCountChanged();
        emit changed();
    }

    Dialog::DialogType classType() const {
        return _classType;
    }

    void setClassType(Dialog::DialogType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Dialog & another) {
        *_peer = another.peer();
        *_notifySettings = another.notifySettings();
        _topMessage = another.topMessage();
        _unreadCount = another.unreadCount();
        _classType = another.classType();

    }
signals:
    void changed();
    void peerChanged();
    void notifySettingsChanged();
    void topMessageChanged();
    void unreadCountChanged();
    void classTypeChanged();

private:
    PeerObject* _peer;
    PeerNotifySettingsObject* _notifySettings;
    qint32 _topMessage;
    qint32 _unreadCount;
    Dialog::DialogType _classType;

};

class MessageMediaObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(AudioObject* audio READ audio WRITE setAudio NOTIFY audioChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(QByteArray bytes READ bytes WRITE setBytes NOTIFY bytesChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(DocumentObject* document READ document WRITE setDocument NOTIFY documentChanged)
    Q_PROPERTY(GeoPointObject* geo READ geo WRITE setGeo NOTIFY geoChanged)
    Q_PROPERTY(PhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(QString phoneNumber READ phoneNumber WRITE setPhoneNumber NOTIFY phoneNumberChanged)
    Q_PROPERTY(qint32 userId READ userId WRITE setUserId NOTIFY userIdChanged)
    Q_PROPERTY(VideoObject* video READ video WRITE setVideo NOTIFY videoChanged)
    Q_PROPERTY(MessageMedia::MessageMediaType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    MessageMediaObject(const MessageMedia & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _audio = new AudioObject(another.audio(), this);
        _lastName = another.lastName();
        _bytes = another.bytes();
        _firstName = another.firstName();
        _document = new DocumentObject(another.document(), this);
        _geo = new GeoPointObject(another.geo(), this);
        _photo = new PhotoObject(another.photo(), this);
        _phoneNumber = another.phoneNumber();
        _userId = another.userId();
        _video = new VideoObject(another.video(), this);
        _classType = another.classType();

    }
    MessageMediaObject(QObject *parent = 0) : QObject(parent){}
    ~MessageMediaObject(){}

    AudioObject* audio() const {
        return _audio;
    }

    void setAudio(AudioObject* value) {
        if( value == _audio )
            return;
        _audio = value;
        emit audioChanged();
        emit changed();
    }

    QString lastName() const {
        return _lastName;
    }

    void setLastName(QString value) {
        if( value == _lastName )
            return;
        _lastName = value;
        emit lastNameChanged();
        emit changed();
    }

    QByteArray bytes() const {
        return _bytes;
    }

    void setBytes(QByteArray value) {
        if( value == _bytes )
            return;
        _bytes = value;
        emit bytesChanged();
        emit changed();
    }

    QString firstName() const {
        return _firstName;
    }

    void setFirstName(QString value) {
        if( value == _firstName )
            return;
        _firstName = value;
        emit firstNameChanged();
        emit changed();
    }

    DocumentObject* document() const {
        return _document;
    }

    void setDocument(DocumentObject* value) {
        if( value == _document )
            return;
        _document = value;
        emit documentChanged();
        emit changed();
    }

    GeoPointObject* geo() const {
        return _geo;
    }

    void setGeo(GeoPointObject* value) {
        if( value == _geo )
            return;
        _geo = value;
        emit geoChanged();
        emit changed();
    }

    PhotoObject* photo() const {
        return _photo;
    }

    void setPhoto(PhotoObject* value) {
        if( value == _photo )
            return;
        _photo = value;
        emit photoChanged();
        emit changed();
    }

    QString phoneNumber() const {
        return _phoneNumber;
    }

    void setPhoneNumber(QString value) {
        if( value == _phoneNumber )
            return;
        _phoneNumber = value;
        emit phoneNumberChanged();
        emit changed();
    }

    qint32 userId() const {
        return _userId;
    }

    void setUserId(qint32 value) {
        if( value == _userId )
            return;
        _userId = value;
        emit userIdChanged();
        emit changed();
    }

    VideoObject* video() const {
        return _video;
    }

    void setVideo(VideoObject* value) {
        if( value == _video )
            return;
        _video = value;
        emit videoChanged();
        emit changed();
    }

    MessageMedia::MessageMediaType classType() const {
        return _classType;
    }

    void setClassType(MessageMedia::MessageMediaType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const MessageMedia & another) {
        *_audio = another.audio();
        _lastName = another.lastName();
        _bytes = another.bytes();
        _firstName = another.firstName();
        *_document = another.document();
        *_geo = another.geo();
        *_photo = another.photo();
        _phoneNumber = another.phoneNumber();
        _userId = another.userId();
        *_video = another.video();
        _classType = another.classType();

    }
signals:
    void changed();
    void audioChanged();
    void lastNameChanged();
    void bytesChanged();
    void firstNameChanged();
    void documentChanged();
    void geoChanged();
    void photoChanged();
    void phoneNumberChanged();
    void userIdChanged();
    void videoChanged();
    void classTypeChanged();

private:
    AudioObject* _audio;
    QString _lastName;
    QByteArray _bytes;
    QString _firstName;
    DocumentObject* _document;
    GeoPointObject* _geo;
    PhotoObject* _photo;
    QString _phoneNumber;
    qint32 _userId;
    VideoObject* _video;
    MessageMedia::MessageMediaType _classType;

};

class MessageObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(PeerObject* toId READ toId WRITE setToId NOTIFY toIdChanged)
    Q_PROPERTY(bool unread READ unread WRITE setUnread NOTIFY unreadChanged)
    Q_PROPERTY(MessageActionObject* action READ action WRITE setAction NOTIFY actionChanged)
    Q_PROPERTY(qint32 fromId READ fromId WRITE setFromId NOTIFY fromIdChanged)
    Q_PROPERTY(bool out READ out WRITE setOut NOTIFY outChanged)
    Q_PROPERTY(qint32 date READ date WRITE setDate NOTIFY dateChanged)
    Q_PROPERTY(MessageMediaObject* media READ media WRITE setMedia NOTIFY mediaChanged)
    Q_PROPERTY(qint32 fwdDate READ fwdDate WRITE setFwdDate NOTIFY fwdDateChanged)
    Q_PROPERTY(qint32 fwdFromId READ fwdFromId WRITE setFwdFromId NOTIFY fwdFromIdChanged)
    Q_PROPERTY(QString message READ message WRITE setMessage NOTIFY messageChanged)
    Q_PROPERTY(Message::MessageType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    MessageObject(const Message & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _toId = new PeerObject(another.toId(), this);
        _unread = false;
        _action = new MessageActionObject(another.action(), this);
        _fromId = another.fromId();
        _out = false;
        _date = another.date();
        _media = new MessageMediaObject(another.media(), this);
        _fwdDate = another.fwdDate();
        _fwdFromId = another.fwdFromId();
        _message = another.message();
        _classType = another.classType();

    }
    MessageObject(QObject *parent = 0) : QObject(parent){}
    ~MessageObject(){}

    qint32 id() const {
        return _id;
    }

    void setId(qint32 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    PeerObject* toId() const {
        return _toId;
    }

    void setToId(PeerObject* value) {
        if( value == _toId )
            return;
        _toId = value;
        emit toIdChanged();
        emit changed();
    }

    bool unread() const {
        return _unread;
    }

    void setUnread(bool value) {
        if( value == _unread )
            return;
        _unread = value;
        emit unreadChanged();
        emit changed();
    }

    MessageActionObject* action() const {
        return _action;
    }

    void setAction(MessageActionObject* value) {
        if( value == _action )
            return;
        _action = value;
        emit actionChanged();
        emit changed();
    }

    qint32 fromId() const {
        return _fromId;
    }

    void setFromId(qint32 value) {
        if( value == _fromId )
            return;
        _fromId = value;
        emit fromIdChanged();
        emit changed();
    }

    bool out() const {
        return _out;
    }

    void setOut(bool value) {
        if( value == _out )
            return;
        _out = value;
        emit outChanged();
        emit changed();
    }

    qint32 date() const {
        return _date;
    }

    void setDate(qint32 value) {
        if( value == _date )
            return;
        _date = value;
        emit dateChanged();
        emit changed();
    }

    MessageMediaObject* media() const {
        return _media;
    }

    void setMedia(MessageMediaObject* value) {
        if( value == _media )
            return;
        _media = value;
        emit mediaChanged();
        emit changed();
    }

    qint32 fwdDate() const {
        return _fwdDate;
    }

    void setFwdDate(qint32 value) {
        if( value == _fwdDate )
            return;
        _fwdDate = value;
        emit fwdDateChanged();
        emit changed();
    }

    qint32 fwdFromId() const {
        return _fwdFromId;
    }

    void setFwdFromId(qint32 value) {
        if( value == _fwdFromId )
            return;
        _fwdFromId = value;
        emit fwdFromIdChanged();
        emit changed();
    }

    QString message() const {
        return _message;
    }

    void setMessage(QString value) {
        if( value == _message )
            return;
        _message = value;
        emit messageChanged();
        emit changed();
    }

    Message::MessageType classType() const {
        return _classType;
    }

    void setClassType(Message::MessageType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const Message & another) {
        _id = another.id();
        *_toId = another.toId();
        _unread = another.unread();
        *_action = another.action();
        _fromId = another.fromId();
        _out = another.out();
        _date = another.date();
        *_media = another.media();
        _fwdDate = another.fwdDate();
        _fwdFromId = another.fwdFromId();
        _message = another.message();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void toIdChanged();
    void unreadChanged();
    void actionChanged();
    void fromIdChanged();
    void outChanged();
    void dateChanged();
    void mediaChanged();
    void fwdDateChanged();
    void fwdFromIdChanged();
    void messageChanged();
    void classTypeChanged();

private:
    qint32 _id;
    PeerObject* _toId;
    bool _unread;
    MessageActionObject* _action;
    qint32 _fromId;
    bool _out;
    qint32 _date;
    MessageMediaObject* _media;
    qint32 _fwdDate;
    qint32 _fwdFromId;
    QString _message;
    Message::MessageType _classType;

};

class UserObject : public QObject
{
    Q_OBJECT
    Q_PROPERTY(qint32 id READ id WRITE setId NOTIFY idChanged)
    Q_PROPERTY(qint64 accessHash READ accessHash WRITE setAccessHash NOTIFY accessHashChanged)
    Q_PROPERTY(bool inactive READ inactive WRITE setInactive NOTIFY inactiveChanged)
    Q_PROPERTY(QString phone READ phone WRITE setPhone NOTIFY phoneChanged)
    Q_PROPERTY(QString firstName READ firstName WRITE setFirstName NOTIFY firstNameChanged)
    Q_PROPERTY(UserProfilePhotoObject* photo READ photo WRITE setPhoto NOTIFY photoChanged)
    Q_PROPERTY(UserStatusObject* status READ status WRITE setStatus NOTIFY statusChanged)
    Q_PROPERTY(QString lastName READ lastName WRITE setLastName NOTIFY lastNameChanged)
    Q_PROPERTY(User::UserType classType READ classType WRITE setClassType NOTIFY classTypeChanged)

public:
    UserObject(const User & another, QObject *parent = 0) : QObject(parent){
        (void)another;
        _id = another.id();
        _accessHash = another.accessHash();
        _inactive = false;
        _phone = another.phone();
        _firstName = another.firstName();
        _photo = new UserProfilePhotoObject(another.photo(), this);
        _status = new UserStatusObject(another.status(), this);
        _lastName = another.lastName();
        _classType = another.classType();

    }
    UserObject(QObject *parent = 0) : QObject(parent){}
    ~UserObject(){}

    qint32 id() const {
        return _id;
    }

    void setId(qint32 value) {
        if( value == _id )
            return;
        _id = value;
        emit idChanged();
        emit changed();
    }

    qint64 accessHash() const {
        return _accessHash;
    }

    void setAccessHash(qint64 value) {
        if( value == _accessHash )
            return;
        _accessHash = value;
        emit accessHashChanged();
        emit changed();
    }

    bool inactive() const {
        return _inactive;
    }

    void setInactive(bool value) {
        if( value == _inactive )
            return;
        _inactive = value;
        emit inactiveChanged();
        emit changed();
    }

    QString phone() const {
        return _phone;
    }

    void setPhone(QString value) {
        if( value == _phone )
            return;
        _phone = value;
        emit phoneChanged();
        emit changed();
    }

    QString firstName() const {
        return _firstName;
    }

    void setFirstName(QString value) {
        if( value == _firstName )
            return;
        _firstName = value;
        emit firstNameChanged();
        emit changed();
    }

    UserProfilePhotoObject* photo() const {
        return _photo;
    }

    void setPhoto(UserProfilePhotoObject* value) {
        if( value == _photo )
            return;
        _photo = value;
        emit photoChanged();
        emit changed();
    }

    UserStatusObject* status() const {
        return _status;
    }

    void setStatus(UserStatusObject* value) {
        if( value == _status )
            return;
        _status = value;
        emit statusChanged();
        emit changed();
    }

    QString lastName() const {
        return _lastName;
    }

    void setLastName(QString value) {
        if( value == _lastName )
            return;
        _lastName = value;
        emit lastNameChanged();
        emit changed();
    }

    User::UserType classType() const {
        return _classType;
    }

    void setClassType(User::UserType value) {
        if( value == _classType )
            return;
        _classType = value;
        emit classTypeChanged();
        emit changed();
    }


    void operator= ( const User & another) {
        _id = another.id();
        _accessHash = another.accessHash();
        _inactive = another.inactive();
        _phone = another.phone();
        _firstName = another.firstName();
        *_photo = another.photo();
        *_status = another.status();
        _lastName = another.lastName();
        _classType = another.classType();

    }
signals:
    void changed();
    void idChanged();
    void accessHashChanged();
    void inactiveChanged();
    void phoneChanged();
    void firstNameChanged();
    void photoChanged();
    void statusChanged();
    void lastNameChanged();
    void classTypeChanged();

private:
    qint32 _id;
    qint64 _accessHash;
    bool _inactive;
    QString _phone;
    QString _firstName;
    UserProfilePhotoObject* _photo;
    UserStatusObject* _status;
    QString _lastName;
    User::UserType _classType;

};

static bool initialize() {
    qmlRegisterType<FileLocationObject>("SigramTypes", 1, 0, "FileLocation");
    qmlRegisterType<PeerObject>("SigramTypes", 1, 0, "Peer");
    qmlRegisterType<UserStatusObject>("SigramTypes", 1, 0, "UserStatus");
    qmlRegisterType<GeoPointObject>("SigramTypes", 1, 0, "GeoPoint");
    qmlRegisterType<PeerNotifySettingsObject>("SigramTypes", 1, 0, "PeerNotifySettings");
    qmlRegisterType<PhotoSizeObject>("SigramTypes", 1, 0, "PhotoSize");
    qmlRegisterType<AudioObject>("SigramTypes", 1, 0, "Audio");
    qmlRegisterType<DocumentObject>("SigramTypes", 1, 0, "Document");
    qmlRegisterType<VideoObject>("SigramTypes", 1, 0, "Video");
    qmlRegisterType<PhotoObject>("SigramTypes", 1, 0, "Photo");
    qmlRegisterType<MessageActionObject>("SigramTypes", 1, 0, "MessageAction");
    qmlRegisterType<ChatPhotoObject>("SigramTypes", 1, 0, "ChatPhoto");
    qmlRegisterType<UserProfilePhotoObject>("SigramTypes", 1, 0, "UserProfilePhoto");
    qmlRegisterType<ChatObject>("SigramTypes", 1, 0, "Chat");
    qmlRegisterType<DialogObject>("SigramTypes", 1, 0, "Dialog");
    qmlRegisterType<MessageMediaObject>("SigramTypes", 1, 0, "MessageMedia");
    qmlRegisterType<MessageObject>("SigramTypes", 1, 0, "Message");
    qmlRegisterType<UserObject>("SigramTypes", 1, 0, "User");

    return true;
}
static bool initialized = initialize();

#endif
